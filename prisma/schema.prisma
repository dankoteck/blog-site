generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    author        Author?
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Comment {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    content   String

    story   Story  @relation(fields: [storyId], references: [id])
    storyId String

    author   Author @relation(fields: [authorId], references: [id])
    authorId String
}

model Reaction {
    id        String   @id @default(cuid())
    type      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    stories Story[] @relation("StoryReaction")
}

model Topic {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    authorFollowings Author[] @relation("TopicAuthorFollowings")
    stories          Story[]  @relation("TopicStory")
}

model Story {
    id           String    @id @default(cuid())
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    title        String
    content      String
    viewed       Int       @default(0)
    thumbnailURL String?   @default("")
    readingTime  String    @default("0 min read")
    comments     Comment[]

    author   Author @relation(fields: [authorId], references: [id])
    authorId String

    topics        Topic[]    @relation("TopicStory")
    reactions     Reaction[] @relation("StoryReaction")
    pinnedBy      Author[]   @relation("StoryPinned")
    blockedBy     Author[]   @relation("StoryBlocked")
    bookmarkedBy  Author[]   @relation("StoryBookmarked")
    inCollections Author[]   @relation("StoryCollections")
}

model Author {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    username  String?  @unique
    bio       String?

    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    comments Comment[]

    blockedAuthors   Author[] @relation("AuthorBlocked")
    blockedByAuthors Author[] @relation("AuthorBlocked")
    followings       Author[] @relation("AuthorFollow")
    followers        Author[] @relation("AuthorFollow")
    subscribers      Author[] @relation("AuthorSubscribe")
    subscribings     Author[] @relation("AuthorSubscribe")

    stories        Story[]
    blockedStories Story[] @relation("StoryBlocked")
    bookmarked     Story[] @relation("StoryBookmarked")
    collections    Story[] @relation("StoryCollections")
    pinned         Story[] @relation("StoryPinned")

    followingTopics Topic[] @relation("TopicAuthorFollowings")
}
