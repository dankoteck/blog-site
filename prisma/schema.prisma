generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    author        Author?
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Comment {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    content   String
    authorId  String
    storyId   String
    story     Story    @relation(fields: [storyId], references: [id])
    author    Author   @relation(fields: [authorId], references: [id])
}

model Reaction {
    id        String          @id @default(cuid())
    type      String
    createdAt DateTime        @default(now())
    updatedAt DateTime        @updatedAt
    stories   StoryReaction[]
}

model Topic {
    id         String               @id @default(cuid())
    name       String
    createdAt  DateTime             @default(now())
    updatedAt  DateTime             @updatedAt
    followedBy AuthorFollowsTopic[]
    stories    StoryTopic[]
}

model AuthorFollowsTopic {
    authorId String
    topicId  String
    author   Author @relation(fields: [authorId], references: [id])
    topic    Topic  @relation(fields: [topicId], references: [id])

    @@id([authorId, topicId])
}

model StoryTopic {
    storyId String
    topicId String
    topic   Topic  @relation(fields: [topicId], references: [id])
    story   Story  @relation(fields: [storyId], references: [id])

    @@id([storyId, topicId])
}

model StoryReaction {
    storyId    String
    reactionId String
    reaction   Reaction @relation(fields: [reactionId], references: [id])
    story      Story    @relation(fields: [storyId], references: [id])

    @@id([storyId, reactionId])
}

model StoryBlocked {
    storyId  String
    authorId String
    author   Author @relation(fields: [authorId], references: [id])
    story    Story  @relation(fields: [storyId], references: [id])

    @@id([storyId, authorId])
}

model StoryInAuthorCollections {
    storyId  String
    authorId String
    author   Author @relation(fields: [authorId], references: [id])
    story    Story  @relation(fields: [storyId], references: [id])

    @@id([storyId, authorId])
}

model StoryInAuthorBookmarked {
    storyId  String
    authorId String
    author   Author @relation(fields: [authorId], references: [id])
    story    Story  @relation(fields: [storyId], references: [id])

    @@id([storyId, authorId])
}

model StoryInAuthorPinned {
    storyId  String
    authorId String
    author   Author @relation(fields: [authorId], references: [id])
    story    Story  @relation(fields: [storyId], references: [id])

    @@id([storyId, authorId])
}

model Story {
    id                String                     @id @default(cuid())
    createdAt         DateTime                   @default(now())
    updatedAt         DateTime                   @updatedAt
    title             String
    content           String
    viewed            Int                        @default(0)
    thumbnailURL      String?                    @default("")
    readingTime       String                     @default("0 min read")
    authorId          String
    comments          Comment[]
    author            Author                     @relation(fields: [authorId], references: [id])
    blockedByAuthor   StoryBlocked[]
    authorBookmarked  StoryInAuthorBookmarked[]
    authorCollections StoryInAuthorCollections[]
    authorPinned      StoryInAuthorPinned[]
    reactions         StoryReaction[]
    topics            StoryTopic[]
}

model Author {
    id             String                     @id @default(cuid())
    createdAt      DateTime                   @default(now())
    updatedAt      DateTime                   @updatedAt
    username       String?                    @unique
    bio            String?
    userId         String                     @unique
    user           User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
    blockedAuthor  BlockedAuthor?             @relation("blockedAuthor")
    comment        Comment[]
    following      FollowsAuthor[]            @relation("following")
    followedBy     FollowsAuthor[]            @relation("followedBy")
    stories        Story[]
    blockedStories StoryBlocked[]
    bookmarked     StoryInAuthorBookmarked[]
    collections    StoryInAuthorCollections[]
    pinned         StoryInAuthorPinned[]
    subscribe      SubscribeAuthor?           @relation("subscribe")
    topicFollows   AuthorFollowsTopic[]
}

model BlockedAuthor {
    blockedAuthorId String @id
    blockedAuthor   Author @relation("blockedAuthor", fields: [blockedAuthorId], references: [id])
}

model SubscribeAuthor {
    subscribeId String @id
    subscribe   Author @relation("subscribe", fields: [subscribeId], references: [id])
}

model FollowsAuthor {
    followedById String
    followingId  String
    following    Author @relation("following", fields: [followingId], references: [id])
    followedBy   Author @relation("followedBy", fields: [followedById], references: [id])

    @@id([followedById, followingId])
}
