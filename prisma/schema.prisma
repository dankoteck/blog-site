// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Comment {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    content   String
    author    Author   @relation(fields: [authorId], references: [id])
    authorId  String
    story     Story    @relation(fields: [storyId], references: [id])
    storyId   String
}

model Reaction {
    id        String            @id @default(cuid())
    type      String
    createdAt DateTime          @default(now())
    updatedAt DateTime          @updatedAt
    stories   StoryOnReaction[]
}

model Topic {
    id        String         @id @default(cuid())
    name      String
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
    stories   StoryOnTopic[]
}

model StoryOnTopic {
    story   Story  @relation(fields: [storyId], references: [id])
    storyId String // relation scalar field (used in the `@relation` attribute above)
    topic   Topic  @relation(fields: [topicId], references: [id])
    topicId String // relation scalar field (used in the `@relation` attribute above)

    @@id([storyId, topicId])
}

model StoryOnReaction {
    story      Story    @relation(fields: [storyId], references: [id])
    storyId    String // relation scalar field (used in the `@relation` attribute above)
    reaction   Reaction @relation(fields: [reactionId], references: [id])
    reactionId String // relation scalar field (used in the `@relation` attribute above)

    @@id([storyId, reactionId])
}

model StoryBlockedByAuthor {
    story    Story  @relation(fields: [storyId], references: [id])
    storyId  String // relation scalar field (used in the `@relation` attribute above)
    author   Author @relation(fields: [authorId], references: [id])
    authorId String // relation scalar field (used in the `@relation` attribute above)

    @@id([storyId, authorId])
}

model StoryInAuthorCollections {
    story    Story  @relation(fields: [storyId], references: [id])
    storyId  String // relation scalar field (used in the `@relation` attribute above)
    author   Author @relation(fields: [authorId], references: [id])
    authorId String // relation scalar field (used in the `@relation` attribute above)

    @@id([storyId, authorId])
}

model StoryInAuthorBookmarked {
    story    Story  @relation(fields: [storyId], references: [id])
    storyId  String // relation scalar field (used in the `@relation` attribute above)
    author   Author @relation(fields: [authorId], references: [id])
    authorId String // relation scalar field (used in the `@relation` attribute above)

    @@id([storyId, authorId])
}

model StoryInAuthorPinned {
    story    Story  @relation(fields: [storyId], references: [id])
    storyId  String // relation scalar field (used in the `@relation` attribute above)
    author   Author @relation(fields: [authorId], references: [id])
    authorId String // relation scalar field (used in the `@relation` attribute above)

    @@id([storyId, authorId])
}

model Story {
    id           String            @id @default(cuid())
    createdAt    DateTime          @default(now())
    updatedAt    DateTime          @updatedAt
    title        String
    content      String
    viewed       Int
    topics       StoryOnTopic[]
    reactions    StoryOnReaction[]
    thumbnailURL String
    readingTime  DateTime
    comments     Comment[]

    author   Author @relation(fields: [authorId], references: [id])
    authorId String

    blockedByAuthor   StoryBlockedByAuthor[]
    authorCollections StoryInAuthorCollections[]
    authorBookmarked  StoryInAuthorBookmarked[]
    authorPinned      StoryInAuthorPinned[]
}

model Author {
    id             String                     @id @default(cuid())
    createdAt      DateTime                   @default(now())
    updatedAt      DateTime                   @updatedAt
    name           String
    username       String                     @unique
    email          String                     @unique
    password       String
    avatarURL      String
    bio            String
    stories        Story[]
    blockedStories StoryBlockedByAuthor[]
    collections    StoryInAuthorCollections[]
    bookmarked     StoryInAuthorBookmarked[]
    pinned         StoryInAuthorPinned[]
    subscribe      Subscribe[]                @relation("subscribe")
    blockedAuthor  BlockedAuthor[]            @relation("blockedAuthor")
    followedBy     Follow[]                   @relation("followedBy")
    following      Follow[]                   @relation("following")
    Comment        Comment[]
}

model BlockedAuthor {
    blockedAuthor   Author @relation("blockedAuthor", fields: [blockedAuthorId], references: [id])
    blockedAuthorId String @id
}

model Subscribe {
    subscribe   Author @relation("subscribe", fields: [subscribeId], references: [id])
    subscribeId String @id
}

// explicit many-to-many relation Follows
model Follow {
    followedBy   Author @relation("followedBy", fields: [followedById], references: [id])
    followedById String
    following    Author @relation("following", fields: [followingId], references: [id])
    followingId  String

    @@id([followedById, followingId])
}
